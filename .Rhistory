family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
summary(fit_brms)
# random ints
fit_brms1 <- brm(
can_er ~ me(fmi, se_fmi) + (1 | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_brms1b <- update(fit_brms1, newdata = transform(dat_trim, se_fmi = se_fmi2))
# random slopes and ints
fit_brms2 <- brm(
can_er ~ me(fmi, se_fmi) + (1 + me(fmi, se_fmi) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(exponential(2), class = "sd"),
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
# constrained to be nearly through 0 with strong informative prior
fit_brms3 <- brm(
can_er ~ me(fmi, se_fmi) + (me(fmi, se_fmi) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(-10, 0.25), class = "Intercept"), # very negative prior near 0
prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(exponential(50), class = "sd", group = "indicator",
coef = "Intercept"), # very tight prior close to zero for random intercepts
prior(exponential(2), class = "sd", group = "indicator",
coef = "fmi"),
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
# constrained to be nearly through 0 with strong informative prior
fit_brms3 <- brm(
can_er ~ me(fmi, se_fmi) + (me(fmi, se_fmi) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(
# very informative prior on the fixed‐effect intercept
prior(normal(-10, 0.25), class = "Intercept"),
# weakly informative prior on the fixed slope
prior(normal(1, 5),       class = "b"),
# very tight zero‐centered prior on the SD of the random intercept
prior(exponential(50), class = "sd", group = "indicator",
coef  = "Intercept"),
# fairly tight zero‐centered prior on the SD of the random slope
prior(exponential(2), class = "sd", group = "indicator", coef  = "me_fmi"),
# prior on the Beta‐precision
prior(exponential(1),     class = "phi")
),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
get_prior(
can_er ~ me(fmi, se_fmi) + (me(fmi, se_fmi) | indicator),
data = dat_trim,
family = Beta("logit")
)
# constrained to be nearly through 0 with strong informative prior
fit_brms3 <- brm(
can_er ~ me(fmi, se_fmi) + (me(fmi, se_fmi) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(
# very informative prior on the fixed‐effect intercept
prior(normal(-10, 0.25), class = "Intercept"),
# weakly informative prior on the fixed slope
prior(normal(1, 5),       class = "b"),
# very tight zero‐centered prior on the SD of the random intercept
prior(exponential(50), class = "sd", group = "indicator",
coef = "Intercept"),
# fairly tight zero‐centered prior on the SD of the random slope
prior(exponential(2), class = "sd", group = "indicator",
coef = "mefmise_fmi"),
# prior on the Beta‐precision
prior(exponential(1), class = "phi")
),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
summary(fit_brms3)
pred_dat <- expand.grid(
indicator = unique(dat_trim$indicator),
fmi = seq(0.01, 0.5, length.out = 30)
)
fit_list <- list(fit_brms1, fit_brms2, fit_brms3)
mean_dat <- purrr::map2(
fit_list,
c("rand_i", "rand_s", "rand_s_constrained"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(model, levels = c("rand_i", "rand_s", "rand_s_constrained"))
)
pred_dat <- expand.grid(
indicator = unique(dat_trim$indicator),
fmi = seq(0.01, 0.5, length.out = 30),
se_fmi = 0.1,
se_fmi2 = 0.2
)
fit_list <- list(fit_brms1, fit_brms2, fit_brms3)
mean_dat <- purrr::map2(
fit_list,
c("rand_i", "rand_s", "rand_s_constrained"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(model, levels = c("rand_i", "rand_s", "rand_s_constrained"))
)
fmi_cyer_cor +
geom_line(data = mean_dat %>% filter(!indicator == "global"),
aes(x = fmi, y = Estimate, group = indicator),
linetype = 2) +
geom_line(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, y = Estimate)) +
geom_ribbon(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, ymin = Q2.5, ymax = Q97.5), alpha = 0.2) +
geom_abline(aes(intercept = 0, slope = 1), colour = "red") +
facet_wrap(~model) +
labs(y = "Predicted CWT-based CYER", x = "FMI-based ER") +
theme(legend.position = "top")
summary(fit_brms3)
summary(fit_brms2)
fit_brms3_bad <- fit_brms3
# constrained to be nearly through 0 with strong informative prior
fit_brms3 <- brm(
can_er ~ me(fmi, se_fmi) + (me(fmi, se_fmi) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(
# very informative prior on the fixed‐effect intercept
prior(normal(-10, 0.25), class = "Intercept"),
# weakly informative prior on the fixed slope
prior(normal(1, 2.5), class = "b"),
# very tight zero‐centered prior on the SD of the random intercept
prior(exponential(50), class = "sd", group = "indicator",
coef = "Intercept"),
# fairly tight zero‐centered prior on the SD of the random slope
prior(exponential(2), class = "sd", group = "indicator",
coef = "mefmise_fmi"),
# prior on the Beta‐precision
prior(exponential(1), class = "phi")
),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_list <- list(fit_brms1, fit_brms2, fit_brms3)
mean_dat <- purrr::map2(
fit_list,
c("rand_i", "rand_s", "rand_s_constrained"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(model, levels = c("rand_i", "rand_s", "rand_s_constrained"))
)
pred_cyer_ribbon <- fmi_cyer_cor +
geom_line(data = mean_dat %>% filter(!indicator == "global"),
aes(x = fmi, y = Estimate, group = indicator),
linetype = 2) +
geom_line(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, y = Estimate)) +
geom_ribbon(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, ymin = Q2.5, ymax = Q97.5), alpha = 0.2) +
geom_abline(aes(intercept = 0, slope = 1), colour = "red") +
facet_wrap(~model) +
labs(y = "Predicted CWT-based CYER", x = "FMI-based ER") +
theme(legend.position = "top")
pred_cyer_ribbon
fit_brms1b <- update(fit_brms1, newdata = transform(dat_trim, se_fmi = se_fmi2))
fit_brms2b <- update(fit_brms2, newdata = transform(dat_trim, se_fmi = se_fmi2))
fit_brms3b <- update(fit_brms3, newdata = transform(dat_trim, se_fmi = se_fmi2))
fit_listb <- list(fit_brms1b, fit_brms2b, fit_brms3b)
fit_list <- list(fit_brms1, fit_brms2, fit_brms3,
fit_brms1b, fit_brms2b, fit_brms3b)
mean_dat <- purrr::map2(
fit_list,
c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(model, levels = c("rand_i", "rand_s", "rand_s_constrained"))
)
fmi_cyer_cor +
geom_line(data = mean_dat %>% filter(!indicator == "global"),
aes(x = fmi, y = Estimate, group = indicator),
linetype = 2) +
geom_line(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, y = Estimate)) +
geom_ribbon(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, ymin = Q2.5, ymax = Q97.5), alpha = 0.2) +
geom_abline(aes(intercept = 0, slope = 1), colour = "red") +
facet_wrap(~model) +
labs(y = "Predicted CWT-based CYER", x = "FMI-based ER") +
theme(legend.position = "top")
glimpse(mean_dat)
mean_dat <- purrr::map2(
fit_list,
c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(
model,
levels = c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2"
))
)
fmi_cyer_cor +
geom_line(data = mean_dat %>% filter(!indicator == "global"),
aes(x = fmi, y = Estimate, group = indicator),
linetype = 2) +
geom_line(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, y = Estimate)) +
geom_ribbon(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, ymin = Q2.5, ymax = Q97.5), alpha = 0.2) +
geom_abline(aes(intercept = 0, slope = 1), colour = "red") +
facet_wrap(~model) +
labs(y = "Predicted CWT-based CYER", x = "FMI-based ER") +
theme(legend.position = "top")
summary(fit_brms1)
summary(fit_brms1b)
fit_brms1c <- brm(
can_er ~ fmi + (1 | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 2000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_brms2c <- brm(
can_er ~ fmi + (1 + fmi | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(exponential(2), class = "sd"),
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_brms3c <- brm(
can_er ~ fmi + (fmi | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(
# very informative prior on the fixed‐effect intercept
prior(normal(-10, 0.25), class = "Intercept"),
# weakly informative prior on the fixed slope
prior(normal(1, 2.5), class = "b"),
# very tight zero‐centered prior on the SD of the random intercept
prior(exponential(50), class = "sd", group = "indicator",
coef = "Intercept"),
# fairly tight zero‐centered prior on the SD of the random slope
prior(exponential(2), class = "sd", group = "indicator",
coef = "fmi"),
# prior on the Beta‐precision
prior(exponential(1), class = "phi")
),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_list <- list(fit_brms1, fit_brms2, fit_brms3,
fit_brms1b, fit_brms2b, fit_brms3b,
fit_brms1c, fit_brms2c, fit_brms3c)
fit_brms3c <- brm(
can_er ~ fmi + (fmi | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(
# very informative prior on the fixed‐effect intercept
prior(normal(-10, 0.25), class = "Intercept"),
# weakly informative prior on the fixed slope
prior(normal(1, 2.5), class = "b"),
# very tight zero‐centered prior on the SD of the random intercept
prior(exponential(50), class = "sd", group = "indicator",
coef = "Intercept"),
# fairly tight zero‐centered prior on the SD of the random slope
prior(exponential(2), class = "sd", group = "indicator",
coef = "fmi"),
# prior on the Beta‐precision
prior(exponential(1), class = "phi")
),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
summary(fit_brms3b)
summary(fit_brms3c)
transform(dat_trim, se_fmi = se_fmi2) %>% glimpse()
pred_dat2 <- expand.grid(
indicator = unique(dat_trim$indicator),
fmi = seq(0.01, 0.5, length.out = 30),
se_fmi = 0.2
)
pred1 <- predict(fit_list[[2]], newdata = pred_dat)
pred2 <- predict(fit_list[[2]], newdata = pred_dat2)
identical(pred1, pred2)
head(pred1)
head(pred2)
fit_brms3b <- brm(
can_er ~ me(fmi, se_fmi2) + (me(fmi, se_fmi2) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(
# very informative prior on the fixed‐effect intercept
prior(normal(-10, 0.25), class = "Intercept"),
# weakly informative prior on the fixed slope
prior(normal(1, 2.5), class = "b"),
# very tight zero‐centered prior on the SD of the random intercept
prior(exponential(50), class = "sd", group = "indicator",
coef = "Intercept"),
# fairly tight zero‐centered prior on the SD of the random slope
prior(exponential(2), class = "sd", group = "indicator",
coef = "mefmise_fmi2"),
# prior on the Beta‐precision
prior(exponential(1), class = "phi")
),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_brms1b <- brm(
can_er ~ me(fmi, se_fmi2) + (1 | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
fit_brms2b <- brm(
can_er ~ me(fmi, se_fmi2) + (1 + me(fmi, se_fmi2) | indicator),
data = dat_trim,
family = Beta(link = "logit"),  # Beta regression
prior = c(prior(normal(1, 5), class = "b"),  # Priors for fixed effects
prior(exponential(2), class = "sd"),
prior(normal(0, 2), class = "Intercept"),  # Prior for intercept
prior(exponential(1), class = "phi")),
chains = 4, cores = 4, iter = 3000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
pred_dat <- expand.grid(
indicator = unique(dat_trim$indicator),
fmi = seq(0.01, 0.5, length.out = 30),
se_fmi = 0.1,
se_fmi2 = 0.2
)
fit_list <- list(fit_brms1, fit_brms2, fit_brms3,
fit_brms1b, fit_brms2b, fit_brms3b,
fit_brms1c, fit_brms2c, fit_brms3c)
mean_dat <- purrr::map2(
fit_list,
c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2",
"rand_i", "rand_s", "rand_s_constrained"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(
model,
levels = c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2"
))
)
pred_cyer_ribbon <- fmi_cyer_cor +
geom_line(data = mean_dat %>% filter(!indicator == "global"),
aes(x = fmi, y = Estimate, group = indicator),
linetype = 2) +
geom_line(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, y = Estimate)) +
geom_ribbon(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, ymin = Q2.5, ymax = Q97.5), alpha = 0.2) +
geom_abline(aes(intercept = 0, slope = 1), colour = "red") +
facet_wrap(~model) +
labs(y = "Predicted CWT-based CYER", x = "FMI-based ER") +
theme(legend.position = "top")
pred_cyer_ribbon
mean_dat <- purrr::map2(
fit_list,
c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2",
"rand_i", "rand_s", "rand_s_constrained"),
function (x, y) {
pred1 <- predict(x, newdata = pred_dat)
# pred_dat$est <- pred1[,1]
pred_dat2 <- cbind(pred_dat, pred1)
global_pred <- pred_dat %>%
filter(indicator == "SHU")
pred_fixed <- predict(x, newdata = global_pred, re.form = NA)
global_pred2 <- cbind(global_pred, pred_fixed) %>%
mutate(indicator = "global")
rbind(pred_dat2, global_pred2) %>%
mutate(model = y)
}
) %>%
bind_rows() %>%
mutate(
model = factor(
model,
levels = c("rand_i_0.1", "rand_s_0.1", "rand_s_constrained_0.1",
"rand_i_0.2", "rand_s_0.2", "rand_s_constrained_0.2",
"rand_i", "rand_s", "rand_s_constrained"
))
)
fmi_cyer_cor +
geom_line(data = mean_dat %>% filter(!indicator == "global"),
aes(x = fmi, y = Estimate, group = indicator),
linetype = 2) +
geom_line(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, y = Estimate)) +
geom_ribbon(data = mean_dat %>% filter(indicator == "global"),
aes(x = fmi, ymin = Q2.5, ymax = Q97.5), alpha = 0.2) +
geom_abline(aes(intercept = 0, slope = 1), colour = "red") +
facet_wrap(~model) +
labs(y = "Predicted CWT-based CYER", x = "FMI-based ER") +
theme(legend.position = "top")
summary(fit_brms3)
summary(fit_brms3b)
summary(fit_brms3c)
summary(fit_brms1)
summary(fit_brms1b)
summary(fit_brms1c)
